window.onload = function () { 
  
  
        /*
          1. 함수 정의
           : 함수는 코드의 집합을 나타내는 자료형이다. 함수가 코드의 집합이라고 
             말하는 이유는 중괄호 내부에 코드를 작성하기 때문이다. 이러한 함수는 
             필요시 얼마든지 호출하여 재사용할 수 있다. 

            - 함수선언
                : 함수를 사용하기 위해서 우선 함수를 선언(정의)해야 한다. 함수를 
                  선언하는 방법은 두 가지가 있다. (Function() 생성자함수로 선언하는
                  방법도 존재하나 권장하지 않음) 
                  
                  1) 함수 선언식(= 이름이 있는 함수)
                      : 함수 선언식은 아래와 같이 함수명이 들어간다.  

                    function myFunc(num1, num2) {
                      return num1 + num2
                    }

                  2) 함수 표현식(= 익명함수, 이름이 없는 함수)
                      : 함수도 객체이므로 리터럴 방식의 정의가 가능하다. 즉 변수에 함수를
                        가리키는 참조값을 저장하여(함수 자체를 저장하는 것이 아님) 선언할
                        수 있다. 

                    let func = function(num1, num2) {
                      return num1 + num2
                    }    

            - 함수호출
               : '함수이름()'의 형태로 나타내며, 함수를 실행하는 것을 말한다. 
  
            - 함수를 쓰는 이유
                1) 코드의 간결성
                2) 코드 오류 수정에 용이함 
                3) 코드의 가독성이 좋음   
                
        */
  


      // 함수 선언식
          function testA () {
              console.log("testA 위치입니다.");
          }
  
      // 함수 표현식
          let testB = function(){
              console.log("testB 위치입니다.");
          }
         
      // 함수 호출(= 함수 실행)  
          testA()
          testB()

       /*
          두 함수의 차이(호이스팅 개념 필요)
           - 선언식 함수: 호이스팅에 영향을 받지 않음
           - 표현식 함수: 호이스팅에 영향
       */     
  
  //=====================================================================================
  
      /*
         2. 함수 용어
  
           - 매개 변수(parameter)
            : 함수를 정의할 때 전달되는 값(인자)을 받는 변수
           
           - (전달)인자(argument)
            : 함수를 호출할때 전달되는 실제 값
           
           - 리턴값
            : 함수가 호출될 때 전달 인자로 입력된 값이 연산된 이후 출력(= 반환)되는 값
       
      ※ 흔히 매개변수와 전달인자를 같은 의미로 혼용하여 사용되지만, 
        여기서는 개념을 정리하기 위해 나눠서 설명
  
      */
     
  // 매개 변수와 전달인자
   function f2(i) { // 전달인자(3)를 받을 매개변수로 i를 입력
         return i * i; 
     }

     let output1 = f2(3); // 전달인자로 3을 입력
      console.log(output1);
  
  
  // 리턴값
      function f1(x) {
          return x * x;  
          // x에 전달된 값(=전달 인자)이 x * x의 연산이 된 이후, 
          // 그 결과값이 함수를 호출한 영역으로 반환됨
      }
  
        let output2 = f1(5); // f1(5): 함수 호출, 이 영역으로 리턴값이 반환
        console.log(output2); // f1()함수를 호출하면, 리턴된 값(= 리턴값)이 output2 변수에 저장
  
  //---------------------------------------------
  
   // 매개 변수보다 호출할 전달 인자가 많을 경우!
      function f3(x, y, z) {
          console.log(x);
          console.log(y);
          console.log(z);
      }

      f3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) 
      // 추가된 전달 인자는 무시하고 출력되지 않는다.
      

  //=============================================================================================================
  
  
  /* 함수를 이용하여 점수를 출력해주는 프로그램 만들어 보기! */
  
  function getGrade(score) {
    if (score === 100) {
      return "A+";
    } else if (score >= 90) {
      return "A";
    } else if (score >= 89) {
      return "B+";
    } else if (score >= 80) {
      return "B";
    } else if (score >= 79) {
      return "C+";
    } else if (score >= 70) {
      return "C";
    } else if (score >= 69) {
      return "D+";
    } else if (score >= 60) {
      return "D";
    } else {
      return "F";
    }
  }
  
  const grade = getGrade(70);
  console.log(grade);
    
}
